kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100 res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=FALSE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(3, 3, 2, 4), xpd=TRUE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(1, 1, 1, 1), xpd=TRUE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
par()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
par()
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(5, 5), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(4, 4), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
mydata <- data.frame(ple=c(76.36,50.91,12.73), tre=c(80.12, 57.76, 17.39),
kle=c(84.85, 59.09, 31.82), fre=c(100,28.57, 28.57))
md = as.matrix(mydata)
colnames(md)= c("/plǝ/", "/tʁǝ/", "/klǝ/", "/fʁǝ/")
ok_pars = par(mar=c(4, 4, 2, 4), xpd=TRUE, family="Times New Roman")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(4, 2), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(2, 1), family="Helvetica")
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(2, 1), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(1, 1), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(0.5, 0.5), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(0.5, 0.5), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(0.5, 0.5), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
#setEPS()
png("/Users/tim/Downloads/2_figuren_eps/whatever.png", width = 200, height = 100, res = 300)
par(mar=c(4, 4, 2, 4), xpd=TRUE, pin = c(2, 2), family="Helvetica")
barplot(md, ylab="Presence of phoneme (%)", beside=TRUE,
col=terrain.colors(3))
legend(15, 60, c("Obstruent","Liquid","Schwa"), cex=0.6,
fill=terrain.colors(3))
dev.off()
FTO_data <- read.csv("/Users/tim/Documents/IFADVcorpus/FTO_data_pos_processed.csv")
mean(FTO_data$floor_transfer_offset)
FTO_data <- read.csv("/Users/tim/Documents/IFADVcorpus/FTO_data_auto_pos_processed.csv")
mean(FTO_data$floor_transfer_offset)
library(languageR)
str("alice")
str(alice)
library(languageR)
library(jsonlite)
fileName = 'atlantic_tokens.json'
text = readChar(fileName, file.info(fileName)$size)
fileName = './atlantic_tokens.json'
text = readChar(fileName, file.info(fileName)$size)
fileName = '/atlantic_tokens.json'
text = readChar(fileName, file.info(fileName)$size)
fileName = 'atlantic_tokens.json'
text = readChar(fileName, file.info(fileName)$size)
library(languageR)
library(rjson)
text = fromJSON(file = "atlantic_tokens.json")
timing = read.csv("timing_data.csv")
scores = read.csv("/Users/tim/OneDrive/Master/Master_thesis/data/PitchDisc_dataset.csv")
View(scores)
str(scores)
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
m1 = lm(score ~ experiment, data = scores)
summary(m1)
library(lmerTest)
scores = read.csv("/Users/tim/OneDrive/Master/Master_thesis/data/PitchDisc_dataset.csv")
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
m1 = lmer(score ~ experiment + (1|participant), data = scores)
summary(m1)
scores = read.csv("/Users/tim/OneDrive/Master/Master_thesis/data/PitchDisc_dataset.csv")
View(scores)
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
m1 = lm(simple_score ~ experiment + (1|participant), data = scores)
summary(m1)
m1 = lm(weighted_score ~ experiment + (1|participant), data = scores)
summary(m1)
scores = read.csv("/Users/tim/OneDrive/Master/Master_thesis/data/PitchDisc_dataset.csv")
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
m1 = lm(weighted_score ~ experiment + (1|participant), data = scores)
summary(m1)
scores = read.csv("/Users/tim/OneDrive/Master/Master_thesis/data/PitchDisc_dataset.csv")
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
m1 = lm(weighted_score ~ experiment, data = scores)
summary(m1)
scores = read.csv("/Users/tim/OneDrive/Master/Master_thesis/data/PitchDisc_dataset.csv")
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
m1 = lm(simple_score ~ experiment, data = scores)
summary(m1)
eff = allEffects(m1)
library(effects)
eff = allEffects(m1)
plot(eff$experiment)
ggplot(scores, aes(x=simple_score)) + geom_density(aes(fill=experiment), alpha=0.4)
library(ggplot2)
ggplot(scores, aes(x=simple_score)) + geom_density(aes(fill=experiment), alpha=0.4)
ggplot(scores, aes(x=weighted_score)) + geom_density(aes(fill=experiment), alpha=0.4)
ggplot(scores, aes(x=log(weighted_score))) + geom_density(aes(fill=experiment), alpha=0.4)
ggplot(scores, aes(x=sqrt(weighted_score))) + geom_density(aes(fill=experiment), alpha=0.4)
ggplot(scores, aes(x=weighted_score)) + geom_density(aes(fill=experiment), alpha=0.4)
library(effects)
library(ggplot2)
scores = read.csv("/Users/tim/OneDrive/Master/Master_thesis/data/PitchDisc_dataset.csv")
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
m1 = lm(simple_score ~ experiment, data = scores)
summary(m1)
eff = allEffects(m1)
ggplot(scores, aes(x=weighted_score)) + geom_density(aes(fill=experiment), alpha=0.4)
scores = read.csv("/Users/tim/OneDrive/Master/Master_thesis/data/PitchDisc_dataset.csv")
scores$participant = factor(scores$participant)
scores$experiment = factor(scores$experiment)
m1 = lm(weighted_score ~ experiment, data = scores)
summary(m1)
eff = allEffects(m1)
plot(eff$experiment)
m1 = lm(simple_score ~ experiment, data = scores)
summary(m1)
eff = allEffects(m1)
plot(eff$experiment)
t.test(simple_score ~ experiment, data = scores)
library(lmerTest)
library(effects)
library(lattice)
library(lsmeans)
MMAT2 <- read.csv("MMAT2_dataset_v2.csv")
MMAT3 <- read.csv("MMAT3_dataset_v2.csv")
MMAT2$Experiment = "1"
MMAT3$Experiment = "2"
combined = rbind(MMAT2, MMAT3)
# Rename variables
combined$PitchDifference = factor(combined$PitchDifference)
levels(combined$PitchDifference) = c("Same", "Different")
combined$Experiment = factor(combined$Experiment)
combined$Room = factor(combined$Room)
names(combined)[names(combined) == "PitchDifference"] = "Pitch"
names(combined)[names(combined) == "log10_SUBTLEX"] = "WordFrequency"
names(combined)[names(combined) == "stim_dur"] = "WordLength"
names(combined)[names(combined) == "PrimeRT"] = "Prime_RT"
names(combined)[names(combined) == "LogPrimeRT"] = "PrimeRT"
names(combined)[names(combined) == "LogPrevRT"] = "PreviousRT"
# Remove irrelevant data and extreme outliers
restricted = combined[combined$Type == "word" & combined$Accuracy == "correct"
& combined$PrimeAccuracy == "correct" & combined$RT < 40000
& combined$LogRT > 1,]
# Inspect normality of participants
qqmath(~LogRT|Participant, data = restricted)
# Remove thick right tails (cf. Baayen 2008)
trimmed = restricted[restricted$LogRT < 3.2,]
pitchdata = read.csv("/Users/tim/GitHub/MMAT/stimuli_pitch.csv")
View(pitchdata)
pitchdata$original_pitch = pitchdata$hz / pitchdata$shift
mean(pitchdata[pitchdata$category == "1",]$original_pitch)
NROW(pitchdata[pitchdata$category == "1",]$original_pitch)
sd(pitchdata[pitchdata$category == "1",]$original_pitch)
M = 2.22
SD = 0.46
library(lattice)
library(grid)
library(gplots)
# library(lme4)
library(effects)
library(lmerTest)
library(ggplot2)
slider_data = read.csv("/Users/tim/OneDrive/Master/Master_thesis/slider/slider_data_ext.csv")
slider_data$participant = factor(slider_data$participant)
slider_data$pitch_difference = slider_data$erb_shift + 0.4
slider_data$pitch_difference_log = log(slider_data$pitch_difference)
slider_data$pitch_change = slider_data$erb_shift - slider_data$starting_erb
names(slider_data)[names(slider_data) == "starting_erb"] = "starting_pitch"
slider_data$starting_pitch_difference = slider_data$starting_pitch + 0.4
# Excluding pp 2 & 16
mypanelfn <- function(x,y,...){
panel.xyplot(x=x, y=y, ...)
grid.lines(c(0,1), unit(rep(1.2, 2), "native"), gp=gpar(col = "red"))}
xyplot(pitch_difference ~ starting_pitch_difference | participant, data=slider_data, xlab = "Starting Pitch Difference (ERB)", ylab = "Doubled Pitch Difference (ERB)", layout = c(10,2), panel = mypanelfn)
xyplot(pitch_change ~ starting_pitch_difference | participant, data=slider_data, xlab = "Starting Pitch Difference (ERB)", ylab = "Pitch Adjustment (ERB)", layout = c(10,2))
mean(slider_data$erb_shift)
cor(slider_data[slider_data$participant == "16",]$pitch_difference, slider_data[slider_data$participant == "16",]$starting_pitch_difference)
cor(slider_data[slider_data$participant == "5",]$pitch_change, slider_data[slider_data$participant == "5",]$starting_pitch_difference)
participants = slider_data[slider_data$trial == 6,]$participant
correlations = c()
for(i in participants){
correlation = cor(slider_data[slider_data$participant == i,]$pitch_change, slider_data[slider_data$participant == i,]$starting_pitch_difference)
correlations = c(correlations, correlation)
}
cor_df = data.frame(participants, correlations)
cor_df$trans_cor = 0.5 * log((1 + cor_df$correlations) / (1 - cor_df$correlations))
plot(sort(cor_df$correlations), main = "Correlations between Pitch Adjustment and Starting Pitch Difference", ylab = "Pearson's r", type = "n")
text(1:nrow(cor_df), sort(cor_df$correlations), as.character(cor_df[order(correlations),]$participants), cex = 0.8)
trans_qq = qqnorm(r2t(cor_df$correlations, 18), plot.it = FALSE)
plot(trans_qq$x,trans_qq$y, type = "n")
text(trans_qq$x, trans_qq$y, as.character(cor_df$participants), cex = 0.8)
qqline(r2t(cor_df$correlations, 18))
good_pp = slider_data[slider_data$participant != "2" & slider_data$participant != "16", ]
# model
m1 = lmer(pitch_difference ~ starting_pitch_difference + (1 + starting_pitch_difference|participant) + (1|stimulus), good_pp)
m2 = lmer(pitch_difference ~ starting_pitch_difference + music + (1 + starting_pitch_difference|participant) + (1|stimulus), good_pp)
m3 = lmer(pitch_difference ~ starting_pitch_difference + strategy + (1 + starting_pitch_difference|participant) + (1|stimulus), good_pp)
m4 = lmer(pitch_difference ~ starting_pitch_difference + trial + (1 + starting_pitch_difference|participant) + (1|stimulus), good_pp)
m5 = lmer(pitch_difference ~ starting_pitch_difference + num_adjustments + (1 + starting_pitch_difference|participant) + (1|stimulus), good_pp)
anova(m1, m2)
anova(m1, m3)
anova(m1, m4)
anova(m1, m5)
fitted_dataset = good_pp[abs(scale(resid(m1))) < 2.5,]
mean(fitted_dataset$pitch_difference)
m_fitted = lmer(pitch_difference ~ starting_pitch_difference + (1 + starting_pitch_difference|participant) + (1|stimulus), fitted_dataset)
summary(m_fitted)
par(mfrow=c(1,2))
qqnorm(residuals(m1), main = "Original Model")
qqline(residuals(m1), col = "red")
qqnorm(residuals(m_fitted), main = "Refitted Model")
qqline(residuals(m_fitted), col = "red")
par(mfrow=c(1,1))
t.test(fitted_dataset$pitch_difference, 2.4)
t.test(fitted_dataset$pitch_difference, mu=2.4)
t.test(log(fitted_dataset$pitch_difference), mu=log(2.4))
t.test(log(fitted_dataset$pitch_difference), mu=log(1.2))
t.test(fitted_dataset$pitch_difference, fitted_dataset$starting_pitch_difference)
mean(predicted(m1))
mean(predict(m1))
?predict
mean(predict(m_fitted))
sd(predict(m_fitted))
mean(log(fitted_dataset$pitch_difference))
exp(0.7753235)
shapiro.test(fitted_dataset$pitch_difference)
shapiro.test(log(fitted_dataset$pitch_difference))
cor(fitted_dataset$pitch_change, fitted_dataset$starting_pitch_difference)
cor.test(fitted_dataset$pitch_change, fitted_dataset$starting_pitch_difference)
library(stylo)
stylo(corpus.dir = "pca_texts", mfw.min = 200, mfw.max = 200,
analysis.type = "PCR", sampling = "normal.sampling", sample.size = 10000,
gui = FALSE)
library(stylo)
stylo(corpus.dir = "./pca_texts", mfw.min = 200, mfw.max = 200,
analysis.type = "PCR", sampling = "normal.sampling", sample.size = 10000,
gui = FALSE)
library(stylo)
stylo(corpus.dir = "/Users/tim/GitHub/frankenstein-v2/pca_texts", mfw.min = 200, mfw.max = 200,
analysis.type = "PCR", sampling = "normal.sampling", sample.size = 10000,
gui = FALSE)
library(stylo)
stylo(corpus.dir = "/Users/tim/GitHub/frankenstein-v2/pca_texts", mfw.min = 200, mfw.max = 200,
analysis.type = "PCR", sampling = "normal.sampling", sample.size = 10000, pca.visual.flavour = "loadings",
gui = FALSE)
raw.corpus <- load.corpus(files = "all", corpus.dir = "/Users/tim/GitHub/frankenstein-v2/pca_texts",
encoding = "UTF-8")
tokenized.corpus <- txt.to.words.ext(raw.corpus, language = "English.all",
preserve.case = FALSE)
summary(tokenized.corpus)
sliced.corpus <- make.samples(tokenized.corpus, sampling = "normal.sampling",
sample.size = 10000)
frequent.features <- make.frequency.list(sliced.corpus, head = 200)
frequent.features
str
str(frequent.features)
library(rjson)
library(stylo)
library(rjson)
raw.corpus <- load.corpus(files = "all", corpus.dir = "/Users/tim/GitHub/frankenstein-v2/pca_texts",
encoding = "UTF-8")
tokenized.corpus <- txt.to.words.ext(raw.corpus, language = "English.all",
preserve.case = FALSE)
summary(tokenized.corpus)
sliced.corpus <- make.samples(tokenized.corpus, sampling = "normal.sampling",
sample.size = 10000)
frequent.features <- fromJSON(file = "/Users/tim/GitHub/frankenstein-v2/f_words.json")
frequent.features
frequent.features <- make.frequency.list(sliced.corpus, head = 3000)
frequent.features
frequent.features <- make.frequency.list(sliced.corpus, head = 200)
frequent.features
library(stylo)
library(rjson)
raw.corpus <- load.corpus(files = "all", corpus.dir = "/Users/tim/GitHub/frankenstein-v2/pca_texts",
encoding = "UTF-8")
tokenized.corpus <- txt.to.words.ext(raw.corpus, language = "English.all",
preserve.case = FALSE)
summary(tokenized.corpus)
sliced.corpus <- make.samples(tokenized.corpus, sampling = "normal.sampling",
sample.size = 10000)
# Temporary list of frequent function words, eventually needs to based on Frankenstein as well
frequent.features <- fromJSON(file = "/Users/tim/GitHub/frankenstein-v2/f_words.json")
freqs <- make.table.of.frequencies(sliced.corpus, features = frequent.features)
stylo(frequencies = freqs, analysis.type = "PCR",
custom.graph.title = "Lamb vs. the Shelleys",
pca.visual.flavour = "loadings",
write.png.file = FALSE, gui = FALSE)
stylo(frequencies = freqs, analysis.type = "PCR",
custom.graph.title = "Lamb vs. the Shelleys",
pca.visual.flavour = "technical",
write.png.file = FALSE, gui = FALSE)
library(stylo)
library(rjson)
raw.corpus <- load.corpus(files = "all", corpus.dir = "/Users/tim/GitHub/frankenstein-v2/pca_texts",
encoding = "UTF-8")
tokenized.corpus <- txt.to.words.ext(raw.corpus, language = "English.all",
preserve.case = FALSE)
summary(tokenized.corpus)
sliced.corpus <- make.samples(tokenized.corpus, sampling = "normal.sampling",
sample.size = 10000)
# Temporary list of frequent function words, eventually needs to based on Frankenstein as well
frequent.features <- fromJSON(file = "/Users/tim/GitHub/frankenstein-v2/f_words.json")
freqs <- make.table.of.frequencies(sliced.corpus, features = frequent.features)
stylo(frequencies = freqs, analysis.type = "PCR",
custom.graph.title = "Lamb vs. the Shelleys",
pca.visual.flavour = "technical",
write.png.file = FALSE, gui = FALSE)
library(stylo)
setwd("/Users/tim/GitHub/frankenstein-v2/analysis")
results = rolling.classify(write.png.file = FALSE,
classification.method = "svm", mfw = 100,
training.set.sampling = "normal.sampling",
slice.size = 1000, slice.overlap = 900)
svm_classification = as.vector(results$classification.results)
hand_classification = rep("MWS", 709)
hand_classification[709] = "PBS"
confusion_matrix = as.matrix(table(Handwriting = hand_classification, Predicted = svm_classification))
library(stylo)
setwd("/Users/tim/GitHub/frankenstein-v2/analysis")
results = rolling.classify(write.png.file = TRUE,
classification.method = "svm", mfw = 100,
training.set.sampling = "normal.sampling",
slice.size = 1000, slice.overlap = 900)
svm_classification = as.vector(results$classification.results)
hand_classification = rep("MWS", 709)
hand_classification[709] = "PBS"
confusion_matrix = as.matrix(table(Handwriting = hand_classification, Predicted = svm_classification))
